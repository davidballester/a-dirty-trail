const fs = require('fs');
const path = require('path');
const parseMarkdown = require('markdown-yaml-metadata-parser');

const source = process.argv[2];
const target = process.argv[3];
processAndSaveMarkdownAssets(source, target);

function processAndSaveMarkdownAssets(source, target) {
    console.log(`Processing markdown assets from ${source} to ${target}`);
    const markdownAssets = findMarkdownAssets(source);
    console.log(`Found ${markdownAssets.length} assets`);
    const processedMarkdownAssets = processMarkdownAssets(markdownAssets);
    console.log('Assets processed');
    saveProcessedMarkdownAssets(processedMarkdownAssets, source, target);
    console.log('Assets saved');
}

function findMarkdownAssets(source) {
    const srcPath = path.join(__dirname, source);
    return findMarkdownAssetsRecursive(srcPath);
}

function findMarkdownAssetsRecursive(basePath) {
    const entriesInPath = fs.readdirSync(basePath);
    const markdownAssets = entriesInPath.map((entry) => {
        const entryFullPath = path.join(basePath, entry);
        const entryStat = fs.statSync(entryFullPath);
        if (isMarkdownAsset(entryFullPath)) {
            return [entryFullPath];
        } else if (entryStat.isDirectory()) {
            return findMarkdownAssetsRecursive(entryFullPath);
        }
        return [];
    });
    return markdownAssets.reduce(
        (allAssets, assetsSubset) => [...allAssets, ...assetsSubset],
        []
    );
}

function isMarkdownAsset(entryStat) {
    return path.extname(entryStat).toLowerCase() === '.md';
}

function processMarkdownAssets(markdownAssets) {
    return markdownAssets.map(processMarkdownAsset);
}

function processMarkdownAsset(markdownAssetPath) {
    const markdownContent = fs.readFileSync(markdownAssetPath, {
        encoding: 'utf-8',
    });
    const { metadata, content: setup } = parseMarkdown(markdownContent);
    return {
        path: markdownAssetPath,
        ts: buildTs(metadata, setup),
    };
}

function buildTs(metadata, setup) {
    return `/* eslint-disable */ 
// File autogenerated by npm run buildSceneTemplates. Do not modify.
const sceneSetupTemplate = ${JSON.stringify({ metadata, setup }, null, 4)};
export default sceneSetupTemplate;
`;
}

function saveProcessedMarkdownAssets(processedMarkdownAssets) {
    processedMarkdownAssets.forEach((processedMarkdownAsset) =>
        saveProcessedMarkdownAsset(processedMarkdownAsset, source, target)
    );
}

function saveProcessedMarkdownAsset(processedMarkdownAsset, source, target) {
    const { path, ts } = processedMarkdownAsset;
    const processedMarkdownAssetPath = getProcessedMarkdownAssetPath(
        path,
        source,
        target
    );
    fs.writeFileSync(processedMarkdownAssetPath, ts, { encoding: 'utf-8' });
}

function getProcessedMarkdownAssetPath(markdownAssetPath, source, target) {
    const extname = path.extname(markdownAssetPath);
    const srcFolder = path.join(__dirname, source);
    const buildFolder = path.join(__dirname, target);
    return markdownAssetPath
        .replace(extname, '.ts')
        .replace(srcFolder, buildFolder);
}
